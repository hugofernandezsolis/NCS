/**
 * @copyright Copyright (c) 2023
 * 
 * @author Hugo Fernandez Solis (hugofernandezsolis@gmail.com)
 * @date 08-08-2024
 * 
 * @file InternetAddress.h
 * 
 * @brief
 */


#ifndef NC_INTERNET_ADDRESS_H
#define NC_INTERNET_ADDRESS_H


#include <string>

#include <NetworkAddress.h>


namespace ncs { // Network Communications System
namespace addr { // Network Communications System Addresses

/**
 * InternetAddress types
 */
using ip_t    = std::string;    // IP Address
using port_t  = int;            // Connection port

/**
 * InternetAddress constants
 */
constexpr char LOCAL_HOST[]   = "localhost";      // Use for local communication in the machine

constexpr port_t RANDOM_PORT  =  0;     // Use to allow the machine to select the port
constexpr port_t INVALID_PORT = -1;     // Use to set an invalid port

constexpr port_t MIN_VALID_PORT =  1023;     // Use to set the minimum valid port value
constexpr port_t MAX_VALID_PORT = 65535;     // Use to set the maximum valid port value


/**
 * @brief
 */
class InternetAddress : NetworkAddress {
public:
/// PUBLIC //////////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @param iPort 
   * @param iIp_
   */
  InternetAddress(const ip_t& iIp, const port_t& iPort);

  /**
   * @brief
   * 
   * @param iInternetAddr 
   */
  InternetAddress(const InternetAddress& iInternetAddr);

  /**
   * @brief
   * 
   * @param iInternetAddr 
   */
  InternetAddress(InternetAddress&& iInternetAddr) noexcept;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] bool is_valid(void) const;

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] bool has_valid_ip(void) const;

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] bool has_valid_port(void) const;

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] addr_family_e address_family(void) const;

  /**
   * @brief
   */
   void clear(void);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @param iIp 
   */
  void set_ip(const ip_t& iIp);

  /**
   * @brief
   * 
   * @param iPort 
   */
  void set_port(const port_t& iPort);

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] ip_t get_ip(void) const;

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] port_t get_port(void) const;

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] const sockaddr_storage& get_storage(void) const;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] std::string to_string(void) const;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////       OPERATORS     //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @param iInternetAddr
   * 
   * @return
   */
  InternetAddress& operator=(const InternetAddress& iInternetAddr);

  /**
   * @brief
   * 
   * @param iInternetAddr
   * 
   * @return
   */
  InternetAddress& operator=(InternetAddress&& iInternetAddr) noexcept;

  /**
   * @brief
   * 
   * @param iInternetAddr
   * 
   * @return
   */
  [[nodiscard]] bool operator==(const InternetAddress& iInternetAddr) const;

  /**
   * @brief
   * 
   * @param iInternetAddr
   * 
   * @return
   */
  [[nodiscard]] bool operator!=(const InternetAddress& iInternetAddr) const;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC ///////////////////////////////////////  FRIEND FUNCTIONS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @param os 
   * @param iInternetAddr
   * 
   * @return
   */
  friend std::ostream& operator<<(std::ostream& os, const InternetAddress& iInternetAddr);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
  /**
   * @brief
   */
  ~InternetAddress();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  

protected:
/// PROTECTED ///////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////       OPERATORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  

private:
/// PRIVATE /////////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] bool has_valid_v4_ip(void) const;


  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] bool has_valid_v6_ip(void) const;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] sockaddr_storage& get_storage(void);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////       OPERATORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  

private:
  sockaddr_storage addrStorage_;
};


} // namespace addr
} // namespace ncs


#endif // NC_INTERNET_ADDRESS_H
