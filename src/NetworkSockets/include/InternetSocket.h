/**
 * @copyright Copyright (c) 2023
 *
 * @author Hugo Fernandez Solis (hugofernandezsolis@gmail.com)
 * @date 08-08-2024
 *
 * @file InternetSocket.h
 *
 * @brief
 */

#ifndef NCS_INTERNET_SOCKET_H
#define NCS_INTERNET_SOCKET_H

#include <InternetAddress.h>
#include <sys/socket.h>

namespace ncs {   // Network Communications System
namespace sock {  // Network Communications System Sockets

/**
 * InternetSocket types
 */
typedef int sd_t;

/**
 * @brief
 */
class InternetSocket {
public:
/// PUBLIC //////////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
  /**
   * @brief Default constructor
   */
  InternetSocket(void);

  /**
   * @brief Copy constructor
   */
  InternetSocket(const InternetSocket& other);

  /**
   * @brief Move constructor
   */
  InternetSocket(InternetSocket&& other) noexcept;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @param iSd 
   */
  void set_sd(const sd_t& iSd);

  /**
   * @brief
   * 
   * @param iAddr 
   */
  void set_addr(const addr::InternetAddress& iAddr);
  
  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] const sd_t& get_sd(void) const;

  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] const addr::InternetAddress& get_addr(void) const;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////      OPERATORS      //////////////////////////////////////////////////

  /**
   * @brief Copy assignment operator
   * 
   * @param iOther
   * 
   * @return
   */
  InternetSocket& operator=(const InternetSocket& iOther);

  /**
   * @brief Move assignment operator
   * 
   * @param iOther
   * 
   * @return
   */
  InternetSocket& operator=(InternetSocket&& iOther) noexcept;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC ///////////////////////////////////////  FRIEND FUNCTIONS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @param oStream 
   * @param iInternetAddr
   * 
   * @return
   */
  friend std::ostream& operator<<(std::ostream& oStream, const InternetSocket& iSocket);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
  /**
   * @brief Destructor
   */
  ~InternetSocket();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:
/// PROTECTED ///////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////      OPERATORS      //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

private:
/// PRIVATE /////////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////      OPERATORS      //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

private:
  sd_t sd_;
  addr::InternetAddress addr_;
};

}  // namespace sock
}  // namespace ncs

#endif  // NCS_INTERNET_SOCKET_H
