/**
 * @copyright Copyright (c) 2023
 * 
 * @author Hugo Fernandez Solis (hugofernandezsolis@gmail.com)
 * @date 08-08-2024
 * 
 * @file NetworkAddress.h
 * 
 * @brief 
 */


#ifndef NCS_NETWORK_ADDRESS_H
#define NCS_NETWORK_ADDRESS_H


#include <sys/socket.h>

namespace ncs { // Network Communications System
namespace addr { // Network Communications System Addresses


/**
 * NetworkAddress types
 */
enum addr_family_e {
  AF_ALG          = AF_ALG,         // Algorithm sockets (cryptographic)
  AF_APPLETALK    = AF_APPLETALK,   // AppleTalk protocol
  AF_ASH          = AF_ASH,         // Ash
  AF_ATMPVC       = AF_ATMPVC,      // ATM PVCs
  AF_ATMSVC       = AF_ATMSVC,      // ATM SVCs
  AF_AX25         = AF_AX25,        // Amateur radio AX.25 protocol
  AF_BLUETOOTH    = AF_BLUETOOTH,   // Bluetooth
  AF_BRIDGE       = AF_BRIDGE,      // Multiprotocol bridge
  AF_CAIF         = AF_CAIF,        // CAIF sockets, for cellular modem communication
  AF_CAN          = AF_CAN,         // Controller Area Network
  AF_DECnet       = AF_DECnet,      // DECnet
  AF_ECONET       = AF_ECONET,      // Acorn Econet
  AF_FILE         = AF_FILE,        // Synonym for AF_UNIX
  AF_IB           = AF_IB,          // InfiniBand
  AF_IEEE802154   = AF_IEEE802154,  // IEEE 802.15.4 sockets, low-rate wireless personal area networks
  AF_INET         = AF_INET,        // IPv4 Internet protocols
  AF_INET6        = AF_INET6,       // IPv6 Internet protocols
  AF_IPX          = AF_IPX,         // Novell Internet Packet Exchange
  AF_IRDA         = AF_IRDA,        // IRDA sockets
  AF_ISDN         = AF_ISDN,        // ISDN
  AF_IUCV         = AF_IUCV,        // Inter-user communication vehicle
  AF_KCM          = AF_KCM,         // Kernel connection multiplexor
  AF_KEY          = AF_KEY,         // Key management protocol
  AF_LLC          = AF_LLC,         // Logical Link Control
  AF_LOCAL        = AF_LOCAL,       // Local communication (UNIX sockets)
  AF_MAX          = AF_MAX,         // Placeholder for the maximum value
  AF_MCTP         = AF_MCTP,        // Management component transport protocol
  AF_MPLS         = AF_MPLS,        // MPLS
  AF_NFC          = AF_NFC,         // Near Field Communication
  AF_NETBEUI      = AF_NETBEUI,     // NETBEUI protocol
  AF_NETLINK      = AF_NETLINK,     // Kernel user interface device
  AF_NETROM       = AF_NETROM,      // Amateur Radio NET/ROM
  AF_PACKET       = AF_PACKET,      // Low-level packet interface
  AF_PHONET       = AF_PHONET,      // Phonet protocols
  AF_PPPOX        = AF_PPPOX,       // PPP over X
  AF_QIPCRTR      = AF_QIPCRTR,     // Qualcomm IPC router
  AF_RDS          = AF_RDS,         // Reliable Datagram Sockets
  AF_ROSE         = AF_ROSE,        // Amateur radio X.25 PLP
  AF_ROUTE        = AF_ROUTE,       // Alias to facilitate routing
  AF_RXRPC        = AF_RXRPC,       // RxRPC sockets
  AF_SECURITY     = AF_SECURITY,    // Security hooks
  AF_SMC          = AF_SMC,         // Shared memory communications
  AF_SNA          = AF_SNA,         // IBM SNA
  AF_TIPC         = AF_TIPC,        // TIPC
  AF_UNIX         = AF_UNIX,        // UNIX domain sockets
  AF_UNSPEC       = AF_UNSPEC,      // Unspecified
  AF_VSOCK        = AF_VSOCK,       // VMCI Sockets
  AF_WANPIPE      = AF_WANPIPE,     // Wanpipe
  AF_X25          = AF_X25,         // ITU-T X.25 / ISO-8208 protocol
  AF_XDP          = AF_XDP,         // Express Data Path
  AF_UNKNOWN      = -1              // Reserved for error indications
};



/**
 * @brief 
 */
class NetworkAddress {
public:
/// PUBLIC //////////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
  /**
   * @brief
   * 
   * @return
   */
  [[nodiscard]] virtual addr_family_e get_address_family(void) const = 0;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////       OPERATORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC ///////////////////////////////////////  FRIEND FUNCTIONS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PUBLIC //////////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
  /**
   * @brief
   */
  virtual ~NetworkAddress();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  

protected:
/// PROTECTED ///////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
  /**
   * @brief
   */
  NetworkAddress(void);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////       OPERATORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PROTECTED ///////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  

private:
/// PRIVATE /////////////////////////////////////     CONSTRUCTORS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////    CLASS METHODS    //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////  SETTERS & GETTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////  OUTPUT FORMATTERS  //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////       OPERATORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// PRIVATE /////////////////////////////////////     DESTRUCTORS     //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};


} // namespace addr
} // namespace ncs


#endif // NCS_NETWORK_ADDRESS_H
